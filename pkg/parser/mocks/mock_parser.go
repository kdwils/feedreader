// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/feedreader/pkg/parser (interfaces: Parser)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	parser "github.com/kdwils/feedreader/pkg/parser"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockParser) Parse(arg0 io.Reader) (*parser.RSSFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0)
	ret0, _ := ret[0].(*parser.RSSFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockParserMockRecorder) Parse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParser)(nil).Parse), arg0)
}

// ParseFromURI mocks base method.
func (m *MockParser) ParseFromURI(arg0 context.Context, arg1 string) (*parser.RSSFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseFromURI", arg0, arg1)
	ret0, _ := ret[0].(*parser.RSSFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseFromURI indicates an expected call of ParseFromURI.
func (mr *MockParserMockRecorder) ParseFromURI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseFromURI", reflect.TypeOf((*MockParser)(nil).ParseFromURI), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/feedreader/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/kdwils/feedreader/storage"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// Connect mocks base method.
func (m *MockStorage) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockStorageMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockStorage)(nil).Connect))
}

// CreateArticle mocks base method.
func (m *MockStorage) CreateArticle(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 time.Time) (*storage.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*storage.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockStorageMockRecorder) CreateArticle(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockStorage)(nil).CreateArticle), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreateFeed mocks base method.
func (m *MockStorage) CreateFeed(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*storage.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeed", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*storage.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeed indicates an expected call of CreateFeed.
func (mr *MockStorageMockRecorder) CreateFeed(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeed", reflect.TypeOf((*MockStorage)(nil).CreateFeed), arg0, arg1, arg2, arg3, arg4)
}

// ListArticles mocks base method.
func (m *MockStorage) ListArticles(arg0 context.Context, arg1 *storage.Options) (storage.ArticleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticles", arg0, arg1)
	ret0, _ := ret[0].(storage.ArticleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticles indicates an expected call of ListArticles.
func (mr *MockStorageMockRecorder) ListArticles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticles", reflect.TypeOf((*MockStorage)(nil).ListArticles), arg0, arg1)
}

// ListArticlesByFeed mocks base method.
func (m *MockStorage) ListArticlesByFeed(arg0 context.Context, arg1 string) ([]*storage.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticlesByFeed", arg0, arg1)
	ret0, _ := ret[0].([]*storage.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticlesByFeed indicates an expected call of ListArticlesByFeed.
func (mr *MockStorageMockRecorder) ListArticlesByFeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticlesByFeed", reflect.TypeOf((*MockStorage)(nil).ListArticlesByFeed), arg0, arg1)
}

// ListFavoritedArticles mocks base method.
func (m *MockStorage) ListFavoritedArticles(arg0 context.Context, arg1 *storage.Options) (storage.ArticleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFavoritedArticles", arg0, arg1)
	ret0, _ := ret[0].(storage.ArticleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFavoritedArticles indicates an expected call of ListFavoritedArticles.
func (mr *MockStorageMockRecorder) ListFavoritedArticles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFavoritedArticles", reflect.TypeOf((*MockStorage)(nil).ListFavoritedArticles), arg0, arg1)
}

// ListFeeds mocks base method.
func (m *MockStorage) ListFeeds(arg0 context.Context, arg1 *storage.Options) (storage.FeedList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeeds", arg0, arg1)
	ret0, _ := ret[0].(storage.FeedList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeeds indicates an expected call of ListFeeds.
func (mr *MockStorageMockRecorder) ListFeeds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeeds", reflect.TypeOf((*MockStorage)(nil).ListFeeds), arg0, arg1)
}

// ListReadArticles mocks base method.
func (m *MockStorage) ListReadArticles(arg0 context.Context, arg1 *storage.Options) (storage.ArticleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReadArticles", arg0, arg1)
	ret0, _ := ret[0].(storage.ArticleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReadArticles indicates an expected call of ListReadArticles.
func (mr *MockStorageMockRecorder) ListReadArticles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReadArticles", reflect.TypeOf((*MockStorage)(nil).ListReadArticles), arg0, arg1)
}

// ListUnreadArticles mocks base method.
func (m *MockStorage) ListUnreadArticles(arg0 context.Context, arg1 *storage.Options) (storage.ArticleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnreadArticles", arg0, arg1)
	ret0, _ := ret[0].(storage.ArticleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnreadArticles indicates an expected call of ListUnreadArticles.
func (mr *MockStorageMockRecorder) ListUnreadArticles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnreadArticles", reflect.TypeOf((*MockStorage)(nil).ListUnreadArticles), arg0, arg1)
}

// Now mocks base method.
func (m *MockStorage) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockStorageMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockStorage)(nil).Now))
}
